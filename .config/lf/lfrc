set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set info size:time
# https://raw.githubusercontent.com/ranger/ranger/master/ranger/data/scope.sh
set previewer ~/bin/scope.sh

# Tryb jednej kolumny
# set nopreview
# set ratios 1
# set info size:time

# Spawn shell in current directory
map S $zsh

# wyszukiwanie za pomocą fzf a następnie przenosi pozycję kursora na wybrany plik lub katalog
# map F $lf -remote "send $id select $(fzf)"
map f $lf -remote "send $id select $(fzf)"
# map f $lf -remote "send $id select $(ls | fzf)"

# Otwiera plik w edytorze
map F $$EDITOR $(fzf)

# uruchamianie poleceń systemowych
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# utworzenie katalogu
# map a push %mkdir<space>
# wywołuje komendę mkdir
map a push :mkdir<space>

# klawisz delete
# map <delete> delete

# ctrl-h
map <backspace> delete

# backspace
# map <backspace2> set hidden!

# pokazuje / ukrywa pliki dot
map . set hidden!

# przeniesienie pliku do katalogu ~/.trash
map t trash

# przejście do katalogu domowego, standardowo jest to skrót 'gh'
map H cd ~

map u !du -sh
map U !du -csh *

# edycja pliku w edytorze vim
map e $$EDITOR $f

# podgląd zawartoście pliku w programie bat
map i $bat $f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map o &rifle $f
# map O $mimeopen --ask $f
map o open $f

map r push :rename<space>

# cmd mkdir %IFS=" "; mkdir -- "$*"

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#
# cmd trash %set -f; mv $fx ~/.trash
cmd trash ${{
    set -f
    printf "Przenieść '$fx' do śmietnika? [T/n] "
    read ans
    if [[ $ans != "n" ]]; then
        data=$(date +%FT%T|tr -d -|tr -d :)
        mkdir -p ~/.trash/$data
        mv $fx ~/.trash/$data/
        echo "$fx" > ~/.trash/$data/info
    fi
}}

# delete current file or selected files (prompting)
cmd delete ${{
    set -f
    printf "Usunąć plik '$fx' ? [T/n] "
    read ans
    [ $ans = "n" ] || rm -rf $fx
}}


cmd doc $lf -doc | less

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd ex ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# paste with rsync
cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd select-files ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
        if [ "$lf_hidden" = "false" ]; then
          # remove any hidden files so you only select files you can see.
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd select-dirs ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
        if [ "$lf_hidden" = "false" ]; then
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}
